* console. log()  -  
	is a function in JavaScript that is used to print any kind of variables defined before in it or to just print any message that needs to be displayed to the user. 
	Syntax: console. log("");

	console.log is used to print any statement on the browser's console window.


-----------------------------------------------------------------------------------------------------------------------


* script tag - 
	<script> </script>
	 scirpt tag is a type of tag in which you can keep all of your javascript code.

	 And this tag is used to do client side scripting   (instructions).
	 You can add script tag under both head and body tag.

	 Best practice - to add all of your script at the end of your body tag. (to enhance user experience).


	 <script>
        console.log('Hello there version 3.0');
     </script>


     Breakdown - 'Hello there version 3.0' - this is string, under ' '.

     			; - is used to terminate any line.



// - for comments (inside script tag).


* to link your js file to index.html file
<script src="index.js">
       
    </script>

index.js - 
 console.log('Hello there version 3.0');
        // for comments 


Run your js file using node - node index.js



-----------------------------------------------------------------------------------------------------------------------



* Difference between Java and Javascript - 

Javascript - 
	JavaScript is a lightweight programming language(“scripting language”) and is used to make web pages interactive. 
	
	It can insert dynamic text into HTML. 
	
	JavaScript is also known as the browser’s language. 

	JavaScript(JS) is not similar or related to Java. 

	Both the languages have a C-like syntax and are widely used in client-side and server-side Web applications, but there are few similarities only.

Features of Javascript are as follows: 

	JavaScript was created in the first place for DOM manipulation. 

	Earlier websites were mostly static, after JS was created dynamic Web sites were made.
	Functions in JS are objects. 

	They may have properties and methods just like another object. 

	They can be passed as arguments in other functions.
	Can handle date and time.
	
	Performs Form Validation although the forms are 
	created using HTML.
	
	No compiler is needed.



-----------------------------------------------------------------------------------------------------------------------



Java - 
	Java is an object-oriented programming language and has a virtual machine platform that allows you to create compiled programs that run on nearly every platform. Java promised, “Write Once, Run Anywhere”.

Features of Java are as follows: 

	1. Platform Independent: The compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. This bytecode can run on any platform.

	2. Object-Oriented Programming Language:  Organizing the program in the terms of collection of objects is a way of object-oriented programming, each of which represents an instance of the class. There are 4 pillars of OOP’s concept:
	Abstraction
	Encapsulation
	Inheritance
	Polymorphism


	For More - https://www.geeksforgeeks.org/difference-between-java-and-javascript/



-----------------------------------------------------------------------------------------------------------------------



* Variable - 
	named memory location is called as variable. 

	*keyword - 'let' is used to create variable.
		e.g. - let a = 17;
			   let name = 'messi';
			   let status = true;
			   let b = 12.4;

	we don't need to specify which data type we're storing, it'll configured automatically.		


	*keyword - 'var' is also used to create variable. 

	What's the difference betwn two - 

	there's a difference of scope betwn these two.

	'let' keyword's lifetime will be within codeblocks. 

	'var' keyword's lifetime is global. (overall program).

	Note - 1. we cannot redeclare 'let' two times.
		   2. But 'var' can be redeclared.	
		   3. variable cannot be a reserved keyword.



-----------------------------------------------------------------------------------------------------------------------



* Constants - 
	fixed value is called as constants.
	cannot be modified later.



-----------------------------------------------------------------------------------------------------------------------




* Dynamic Typing - 
	Javascript is a dynamic typing language. 
	When you declare a variable, you do not need to specify what type this variable is. 
	Javascript engine infers what type this variable is based on the value assigned to at run time.

	e.g. - 
		let n = 23;             // example of dynamic typing 
		console.log(n);
		n = 'vedant';
		n = 23.23;
		console.log(n);	// o/p will be 23.23



-----------------------------------------------------------------------------------------------------------------------




* Primitive types -
	Primitive data types: The predefined data types provided by JavaScript language are known as primitive data types. Primitive data types are also known as in-built data types. 
	
	string
	number
	boolean
	undefined
	null



Number: Number data type in javascript can be used to hold decimal values as well as values without decimals.

String: The string data type in javascript represents a sequence of characters that are surrounded by single or double quotes.

Undefined: The meaning of undefined is ‘value is not assigned’.

Boolean: The boolean data type can accept only two values i.e. true and false.

Null: This data type can hold only one possible value that is null.

BigInt: This data type can represent numbers greater than 253-1 which helps to perform operations on large numbers. The number is specified by writing ‘n’ at the end of the value



-----------------------------------------------------------------------------------------------------------------------




* Reference Types - 	
	
	Reference Value: JavaScript provides three types of Reference values that include Array, Object, and Function. 
	The size of a reference value is dynamic therefore It is stored on Heap. 
	When we access a reference value, we manipulate it through reference, not through its actual value that is stored.

	1. Objects - 	if multiple variables are linked with each other in some way, we can say that it is a object. By combining, them we can make a object.

		e.g. creating person object here containing 2 properties. 
			let person = {
			firstname: 'ved',
			age = 22
			};


		objects are accessible by 1.'dot notation' - 
						person.age
					  2. 'bracket notation' - 
					  	person['age']



	2. Arrays - JavaScript Array is a single variable that is "used to store elements of different data types". JavaScript arrays are zero-indexed. 
	The Javascript Arrays are not associative in nature.
	Arrays are used when we have a 'list of items'. 
	An array allows you to store several values with the same name and access them by using their index number.


	3.Functions - 
	
	A function is a set of statements that take inputs, do some specific computation, and produce output. 

	The idea is to put some commonly or repeatedly done tasks together and make a function so that instead of writing the same code again and again for different inputs, we can call that function.

	JavaScript supports functions. 

	You must already have seen some commonly used functions in JavaScript like alert(), which is a built-in function in JavaScript. 

	But JavaScript allows us to create user-defined functions also. We can create functions in JavaScript using the keyword function.



-----------------------------------------------------------------------------------------------------------------------



* Operators -  
	Arithmetic -> +, -, *, /, %, **, ++, --
	Assignment -> +=, -=, *=, /=, %=, **=, &=, ^=, |=, <<=, >>=
	Comparison -> ==, ===, !=, !==, <, >, <=, >=
	Bitwise    -> &, |, ~, ^, >>, <<, >>> 
	Logical    -> &&, ||, !
	Ternary    -> ?


	Comparison - 
			(loose)Equality (==): Compares the equality of two operands. If equal then the condition is true otherwise false.
			Y = 5 and X = 6
			Y = = X is false.

			Strict equality (===): Compares the equality of two operands with type. If both value and type are equal then the condition is true otherwise false.
			Y = 5 and X = '5'
			Y = = = X is false.

			Inequality (!=):  Compares inequality of two operands. True if operands are not equal. 
			let X = 10 then X ! = 11 is true. 

			Strict inequality(!==): Compares the inequality of two operands with type. If both value and type are equal then the condition is true otherwise false.
			let X = 10 then X ! == '10' is true. 


	Ternary Operator: The ternary operator has three operands. It is the simplified operator of if/else.

	Ternary Operator(?): It is like the short form of the if-else condition. 

	e.g - 
	Y =  ? A : B
	If the condition is true then Y = A otherwise Y = B


	let PMarks = 40;

	// Ternary Operators
	let result = PMarks > 47 ? "Pass" : "Fail";

	console.log(result);		// o/p will be - Fail




	Bitwise - 
		Bitwise AND(&)				a&b		Returns true if both operands are true
		
		Bitwise OR(|)				a|b		Returns true even if one operand is true
		
		Biwise XOR(^)				a^b		Returns true if both operands are different
		
		Bitwise NOT(~)				a~b		Flips the value of the operand
		
		Bitwise Left Shift(<<)		a<<b	Shifts the bit toward the left
		
		Bitwise Right Shift(>>)		a>>b	Shifts the bit towards the right
		
		Zero Fill Right Shift(>>>)	a>>>b	Shifts the bit towards the right but adds 0 from left




-----------------------------------------------------------------------------------------------------------------------



* Operator Precedence - 	
	Operator precedence refers to the priority given to operators while parsing a statement that has more than one operator performing operations in it. 
	It is important to ensure the correct result and also to help the compiler understand what the order of operations should be. 
	Operators with higher priorities are resolved first. 
	But as one goes down the list, the priority decreases and hence their resolution.



-----------------------------------------------------------------------------------------------------------------------




* Loops - 
	There are mainly two types of loops:

	Entry Controlled Loop: In these types of loops, the test condition is tested before entering the loop body. The for Loop and while Loop are entry-controlled loops.
	
	Exit Controlled Loop: In these types of loops the test condition is tested or evaluated at the end of the loop body. Therefore, the loop body will execute at least once, irrespective of whether the test condition is true or false. The do-while loop is exit controlled loop.



	For-in: For-in loop in JavaScript is used to iterate over the properties of an object. 
	The for-in loop iterates only over those keys of an object which have their enumerable property set to “true”.



-----------------------------------------------------------------------------------------------------------------------




* Objects - 
	
	Objects, in JavaScript, are the most important data type and form the building blocks for modern JavaScript.
	
	These objects are quite different from JavaScript’s primitive data types (Number, String, Boolean, null, undefined, and symbol) in the sense that these primitive data types all store a single value each (depending on their types).

	Note:- Object()  can be called with or without new. Both create a new object.

	e.g.  - 

	// JavaScript code demonstrating a simple object
	let school = {
	name: 'Vivekananda School',
	location : 'Delhi',
	established : '1971',
	displayInfo : function(){
		console.log(`${school.name} was established
			in ${school.established} at ${school.location}`);
	}
	}
	school.displayInfo();

	Description - 

		In this example “name”, “location”, and “established” are all “keys” and “Vivekananda School”, “Delhi” and 1971 are values of these keys respectively. Each of these keys is referred to as properties of the object. 

		An object in JavaScript may also have a function as a member, in which case it will be known as a method of that object. 

		Here  “displayinfo” is a method of the school object that is being used to work with the object’s data, stored in its properties.



	An object can be created with figure brackets {…} <- also called as object literal.

	objects can be created in two ways - 

		1. Factory Function - 

			The Factory Function is similar to constructor functions/class functions, but instead of using new to create an object, factory functions simply creates an object and returns it.

			Factory Functions differ from regular functions as they always return an object, which will contain any value, method, etc.


		2. Constructor Function -

			In constructor function we follow a notation called as Pascal Notation.
			means -> first letter of every word is capital. -> NumberofStudents

			We use "this" keyword in constructor function.

			'this' is used to determine current object, that you're working on. / refers to current object.

			If you've not created any object, then it'll be referring to an empty object.

			Constructor function is a function which is defining/initializing your properties/methods.

			In constructor we don't need to return.

			'new' is a keyword which return an empty object.




-----------------------------------------------------------------------------------------------------------------------




* Dynamic nature of objects - 
	
	e.g - 

		rectObjectcons.color = 'SkyBlue';       // dynamically adding properties to the object.
		console.log(rectObjectcons);

		delete rectObjectcons.color;            // dynamically deleting properties of the object.
		console.log(rectObjectcons);


-----------------------------------------------------------------------------------------------------------------------



* Constructor Property - 
		The constructor property returns the function that created the Object prototype.

		For JavaScript objects the constructor property returns:

		function Object() { [native code] }



-----------------------------------------------------------------------------------------------------------------------



* Functions are OBJECTS - 
	
		In JavaScript, functions are first-class objects, because they can be passed to other functions, returned from functions, and assigned to variables and properties. 

		They can also have properties and methods just like any other object.



-----------------------------------------------------------------------------------------------------------------------




* Primitive and Reference types - 

	e.g. 
		// primitive example
		// -------------------
		let a = 10;
		let b = a;

		a++;
		onsole.log(a);
		console.log(b);

		o/p - 11
			  10 

		Because in primitive type, separate copy for each variable gets created, that's why, values of a and b is different.


		// reference type example 
		// ----------------------
		let m = { value: 10};
		let n = m;

		m.value++;

		console.log(m.value);
		console.log(n.value);

		o/p - 11
			  11

		Because is reference type, we point at same address. When we write n = m; means that where m is pointing, n will also point at the same location as m.


		* IMP NOTE - 
			Primitives are copied by their values.
			References are copied by their address/reference.




-----------------------------------------------------------------------------------------------------------------------




* For - of Loop - 
	
	The JavaScript for of statement loops through the values of an iterable object.

	iterable is anything that you can loop over.

	It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more:

	Syntax - 

		let square = {
  		length: 30,
  		breadth: 90,
		};

		for(let key of Object.keys(square)){  // object.entries
  		console.log(key);
		}


		variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared with const, let, or var.

		iterable - An object that has iterable properties.



-----------------------------------------------------------------------------------------------------------------------




* For - In Loop - 
	
	For-in loop in JavaScript is used to iterate over the properties of an object. 

	It can be a great debugging tool if we want to show the contents of an object.

	Syntax: 

		let square = {
  		length: 30,
  		breadth: 90,
		};

		for (let key in square) {
  		console.log(key, square[key]);
		}



-----------------------------------------------------------------------------------------------------------------------




* Object Cloning - 
	
	Cloning a JavaScript object is a task that is used mostly because we do not want to create the same object if the same object already exists. There are a few ways.

	1. Iteration -->

		e.g - 

			// iteration
			let src = {
  				a: 10,
  				b: 17,
  				c: 30,
			};

			let destination = {};

			for (let key in src) {
  			destination[key] = src[key];
			}
			console.log(destination);

	2. Assign -->

		e.g. - 

			// assign(method)
			let src1 = {
  					l: 40,
  					m: 20,
  					n: 10,
			};

			let src2 = {
  					p: 25,
  					q: 10,
  					r: 50,
			};

			let destination1 = Object.assign({}, src1);
			// let destination1 = Object.assign({}, src1, src2); // we can also clone/copy multiple object into single object.
			console.log(destination1);


	3. Spread -->

		e.g - 

		// spread
		let src3 = {
 			u: 15,
  			v: 90,
  			w: 110,
		};

		let destination3 = { ...src3 };
		console.log(destination3);



-----------------------------------------------------------------------------------------------------------------------




* Garbage Collection - 
	
	In order to understand the need of garbage collection, we must first understand Memory Life Cycle

	Memory Life Cycle: The memory life cycle is pretty much the same for any programming language, it has 3 major steps.

	I.  Allocate the memory.
	
	II.  Use the allocated memory either to read or write or both.
	
	III. Release the allocated memory when it is no longer required.
	

	An overview behind garbage collection: The majority of memory management issues occur when we try to release the allocated memory. 

	The main concern that arises is the determination of unused memory resources. 

	In case of the low-level languages where the developer has to manually decide when the memory is no longer needed, high-level languages such as JavaScript use an automated form of memory management known as Garbage Collection(GC).

	This is done by Garbage Collector.

	We have no control over garbage collector.(Runs in background)

	GC - identifies the variables and constants which are not in use and de-allocates their memory automatically. 




-----------------------------------------------------------------------------------------------------------------------




* In-built Objects - 
	
	1. Math Object - 

		The Math namespace object contains static properties and methods for mathematical constants and functions.

		Math works with the Number type. It doesn't work with BigInt.

		Read Math Object's various methods here - 
			https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math

	2. String object - 

		In JavaScript string are of two types - primitive and object string.

    	primitive is created by - let lastname = 'messi';

    	object string is created by - let lastname = new String("Messi");

		https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String

 

-----------------------------------------------------------------------------------------------------------------------




* Template literal - 
	
	Template Literal in ES6 provides new features to create a string that gives more control over dynamic strings. 

	Traditionally, String is created using single quotes (‘) or double quotes (“) quotes. 

	Template literal is created using the backtick (`) character.

	Syntax:

		var s=`some string`;

	Multiline Strings: In-order to create a multiline string an escape sequence \n was used to give new line character. 

	However, Template Literals there is no need to add \n string ends only when it gets backtick (`) character.

	Example:

		// Without template literal
		console.log('Some text that I want \non two lines!');
  
		// With template literal
		console.log(`Some text that I want
		on two lines!`);


	Expressions: To dynamically add values into new Template Literals expressions are used. 

	The ${} syntax allows an expression in it that produces the value. 

	This value can be a string stored in a variable or a computation operation.

	Example : The code below shows the use of expressions in template literals.

		let principal = 1000;
		let noofyears = 1;
		let rateofinterest = 7;
  
		let SI = `Simple Interest is ${(principal *
            noofyears * rateofinterest)/100}`;
		alert("Simple Interest is" + SI);




-----------------------------------------------------------------------------------------------------------------------




* Date and Time -
	
	JavaScript Date Objects let us work with dates:

	Tue Sep 12 2023 10:54:49 GMT+0530 (India Standard Time)

	Note - 
	Date objects are static. The "clock" is not "running".

	The computer clock is ticking, date objects are not.

	Date objects are created with the new Date() constructor.

	There are 9 ways to create a new date object:

	new Date()
	new Date(date string)

	new Date(year,month)
	new Date(year,month,day)
	new Date(year,month,day,hours)
	new Date(year,month,day,hours,minutes)
	new Date(year,month,day,hours,minutes,seconds)
	new Date(year,month,day,hours,minutes,seconds,ms)

	new Date(milliseconds)



-----------------------------------------------------------------------------------------------------------------------




* Arrays - 
	
	Adding new elements
	finding elements
	removing elements
	splitting elements
	combining elements


	The Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.

	In JavaScript, arrays aren't primitives but are instead Array objects with the following core characteristics:

	JavaScript arrays are resizable and can contain a mix of different data types. (When those characteristics are undesirable, use typed arrays instead.)
	
	JavaScript arrays are not associative arrays and so, array elements cannot be accessed using arbitrary strings as indexes, but must be accessed using nonnegative integers (or their respective string form) as indexes.
	
	JavaScript arrays are zero-indexed: the first element of an array is at index 0, the second is at index 1, and so on — and the last element is at the value of the array's length property minus 1.
	
	JavaScript array-copy operations create shallow copies. (All standard built-in copy operations with any JavaScript objects create shallow copies, rather than deep copies).

	More -

		https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array


	Array of objects example -

	// Array of objects example -
	let courses = [
	  { roll: 10, name: "messi" },
	  { roll: 17, name: "vedant" },
	];
	console.log(courses);



-----------------------------------------------------------------------------------------------------------------------




* Callback function - 
	
	JavaScript is an asynchronous language, which means that it can handle multiple tasks simultaneously. 

	Callbacks are a fundamental aspect of JavaScript, as they allow you to run code after an asynchronous operation has been completed. 

	
	What are Callbacks?

	A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action. 

	The main function is called with a callback function as its argument, and when the main function is finished, it calls the callback function to provide a result. 

	Callbacks allow you to handle the results of an asynchronous operation in a non-blocking manner, which means that the program can continue to run while the operation is being executed.

	example - 
	// callbacks are also known as predicate/comparison

	// we use callback - functions for reference types - it's a good practice
	let cor = courses.find(function(course){
	    return course.name == 'messi';
	});
	console.log(cor);



	// we can also use arrow function to make it more redable -
	let cor2 = courses.find(course => course.roll === 17);
	console.log(cor2);




-----------------------------------------------------------------------------------------------------------------------




* Functions - 
	
	A block of code that fulfills a specific task.

		Syntax - (general )

		function square(number) {
  			return number * number;
		}


	Why Functions?

		Reusability



-----------------------------------------------------------------------------------------------------------------------




* Rest parameters - 
	The rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.



-----------------------------------------------------------------------------------------------------------------------



* Default Parameters -
	

	Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.



-----------------------------------------------------------------------------------------------------------------------




* Getter and Setter - 

	getter -> access properties
	setter -> change / update / mutate properties

	You've to define getter and setter inside object, in order to use them.

	example - 

	  let person = {
	  fname: "lionel",
	  lname: "messi",

	  get fullname() { // getter implementation
	    return `${person.fname} ${person.lname}`;
	  },

	  set fullname(value){ // setter implementation
	    let parts = value.split(' ');
	    this.fname = parts[0];
	    this.lname = parts[1];

	  }
	};



-----------------------------------------------------------------------------------------------------------------------




* Error handling - 
 	
 	try and catch - 

 		// error handling - try and catch block 
	// try contains code to run, and if any error happens in try block
	// catch block catches that error and throws it.

	example - 

	try{
	  person.fullname = true;       
	}
	catch(e){
	  alert(e);
	  // alert ('You entered wrong value');
	}




-----------------------------------------------------------------------------------------------------------------------




* Scope - 
	
	// scope 

	{     // this code block will give you error
	  let a = 17; // because lifetime of 'let' is within that codeblocks
	}
	// console.log(a);


	{         // this will print value of b
	  var b = 10; // because lifetime of 'var' is throughout the file / function.
	}
	console.log(b);

	function temp(){ // this won't print c, 'cause c is outside of it's scope
	  var c = 80;
	}
	console.log(c);


-----------------------------------------------------------------------------------------------------------------------